gcd = function(a, b){
while (b != 0) {
r = a %% b
a = b
b = r
}
return (a)
}
# Bezout's Coefficients
bezoutCoef = function(m, n){
g = gcd(m, n)
m = m / g
n = n / g
v1 = c(1, 0)
v2 = c(0, 1)
while (n > 1){
r = m %% n
q = m %/% n
v3 = v1 - q * v2
v1 = v2
v2 = v3
m = n
n = r
}
return (v2)
}
#bezoutCoef(173, 167)
#bezoutCoef(603, 626)
gcdSteps = function(a, b) {
step = 0
while (b != 0) {
r = a %% b
a = b
b = r
step = step + 1
}
return (step)
}
highestPower = function(n, b) {
degree = 0
while (n >= (b ^ degree)) {
degree = degree + 1
}
return (degree-1)
}
# comupte the number of digits of an integer
# digitNum = function(b) {
#  return (floor(log10(b) + 1))
# }
digitNum = function(a) {
return (highestPower(a, 10) + 1)
}
highestPowerDivisible = function(n, b) {
degree = 0
while (n %% (b ^ degree) == 0) {
degree = degree + 1
}
return (degree-1)
}
limitOfStep = function(a, lob) {
limitList = NULL
for (i in 1:length(lob)) {
b = lob[i]
step = gcdSteps(a, b)
digits = digitNum(b)
limit = step / digits
limitList = c(limitList, limit)
}
return (limitList)
}
#blist = NULL
#for (i in 10:1000010) {
#  blist = c(blist, i)
#}
blist = seq(from = 10, to = 10010, by = 1)
ycoord = limitOfStep(53753, blist)
plot(x = blist, y = ycoord, type = "p")
#plot(x = blist, y = limitOfStep(2437377, blist), type = "p")
#hist(x = limitOfStep(5437, blist))
# GCD
gcd = function(a, b){
while (b != 0) {
r = a %% b
a = b
b = r
}
return (a)
}
# Bezout's Coefficients
bezoutCoef = function(m, n){
g = gcd(m, n)
m = m / g
n = n / g
v1 = c(1, 0)
v2 = c(0, 1)
while (n > 1){
r = m %% n
q = m %/% n
v3 = v1 - q * v2
v1 = v2
v2 = v3
m = n
n = r
}
return (v2)
}
#bezoutCoef(173, 167)
#bezoutCoef(603, 626)
gcdSteps = function(a, b) {
step = 0
while (b != 0) {
r = a %% b
a = b
b = r
step = step + 1
}
return (step)
}
highestPower = function(n, b) {
degree = 0
while (n >= (b ^ degree)) {
degree = degree + 1
}
return (degree-1)
}
# comupte the number of digits of an integer
# digitNum = function(b) {
#  return (floor(log10(b) + 1))
# }
digitNum = function(a) {
return (highestPower(a, 10) + 1)
}
highestPowerDivisible = function(n, b) {
degree = 0
while (n %% (b ^ degree) == 0) {
degree = degree + 1
}
return (degree-1)
}
limitOfStep = function(a, lob) {
limitList = NULL
for (i in 1:length(lob)) {
b = lob[i]
step = gcdSteps(a, b)
digits = digitNum(b)
limit = step / digits
limitList = c(limitList, limit)
}
return (limitList)
}
#blist = NULL
#for (i in 10:1000010) {
#  blist = c(blist, i)
#}
blist = seq(from = 10, to = 10010, by = 1)
ycoord = limitOfStep(53751, blist)
plot(x = blist, y = ycoord, type = "p")
#plot(x = blist, y = limitOfStep(2437377, blist), type = "p")
#hist(x = limitOfStep(5437, blist))
# GCD
gcd = function(a, b){
while (b != 0) {
r = a %% b
a = b
b = r
}
return (a)
}
# Bezout's Coefficients
bezoutCoef = function(m, n){
g = gcd(m, n)
m = m / g
n = n / g
v1 = c(1, 0)
v2 = c(0, 1)
while (n > 1){
r = m %% n
q = m %/% n
v3 = v1 - q * v2
v1 = v2
v2 = v3
m = n
n = r
}
return (v2)
}
#bezoutCoef(173, 167)
#bezoutCoef(603, 626)
gcdSteps = function(a, b) {
step = 0
while (b != 0) {
r = a %% b
a = b
b = r
step = step + 1
}
return (step)
}
highestPower = function(n, b) {
degree = 0
while (n >= (b ^ degree)) {
degree = degree + 1
}
return (degree-1)
}
# comupte the number of digits of an integer
# digitNum = function(b) {
#  return (floor(log10(b) + 1))
# }
digitNum = function(a) {
return (highestPower(a, 10) + 1)
}
highestPowerDivisible = function(n, b) {
degree = 0
while (n %% (b ^ degree) == 0) {
degree = degree + 1
}
return (degree-1)
}
limitOfStep = function(a, lob) {
limitList = NULL
for (i in 1:length(lob)) {
b = lob[i]
step = gcdSteps(a, b)
digits = digitNum(b)
limit = step / digits
limitList = c(limitList, limit)
}
return (limitList)
}
#blist = NULL
#for (i in 10:1000010) {
#  blist = c(blist, i)
#}
blist = seq(from = 10, to = 10010, by = 1)
ycoord = limitOfStep(53751, blist)
plot(x = blist, y = ycoord, type = "p")
#plot(x = blist, y = limitOfStep(2437377, blist), type = "p")
#hist(x = limitOfStep(5437, blist))
17^2 % 45
(17^2) %% 45
(19^2) %% 45
# GCD
gcd = function(a, b){
while (b != 0) {
r = a %% b
a = b
b = r
}
return (a)
}
# Bezout's Coefficients
bezoutCoef = function(m, n){
g = gcd(m, n)
m = m / g
n = n / g
v1 = c(1, 0)
v2 = c(0, 1)
while (n > 1){
r = m %% n
q = m %/% n
v3 = v1 - q * v2
v1 = v2
v2 = v3
m = n
n = r
}
return (v2)
}
#bezoutCoef(173, 167)
#bezoutCoef(603, 626)
gcdSteps = function(a, b) {
step = 0
while (b != 0) {
r = a %% b
a = b
b = r
step = step + 1
}
return (step)
}
highestPower = function(n, b) {
degree = 0
while (n >= (b ^ degree)) {
degree = degree + 1
}
return (degree-1)
}
# comupte the number of digits of an integer
# digitNum = function(b) {
#  return (floor(log10(b) + 1))
# }
digitNum = function(a) {
return (highestPower(a, 10) + 1)
}
highestPowerDivisible = function(n, b) {
degree = 0
while (n %% (b ^ degree) == 0) {
degree = degree + 1
}
return (degree-1)
}
limitOfStep = function(a, lob) {
limitList = NULL
for (i in 1:length(lob)) {
b = lob[i]
step = gcdSteps(a, b)
digits = digitNum(b)
limit = step / digits
limitList = c(limitList, limit)
}
return (limitList)
}
#blist = NULL
#for (i in 10:1000010) {
#  blist = c(blist, i)
#}
blist = seq(from = 10, to = 10010, by = 1)
ycoord = limitOfStep(53751, blist)
plot(x = blist, y = ycoord, type = "p")
#plot(x = blist, y = limitOfStep(2437377, blist), type = "p")
#hist(x = limitOfStep(5437, blist))
171 %% 26
189 %% 26
144 %% 26
117 %% 26
108 %% 26
90 %% 26
# GCD
gcd = function(a, b){
while (b != 0) {
r = a %% b
a = b
b = r
}
return (a)
}
# Bezout's Coefficients
bezoutCoef = function(m, n){
g = gcd(m, n)
m = m / g
n = n / g
v1 = c(1, 0)
v2 = c(0, 1)
while (n > 1){
r = m %% n
q = m %/% n
v3 = v1 - q * v2
v1 = v2
v2 = v3
m = n
n = r
}
return (v2)
}
#bezoutCoef(173, 167)
#bezoutCoef(603, 626)
inverse = function(a, n) {
if (gcd(a, n) != 1) {
print("No inverse")
}
coeff = bezoutCoef(a, n)
inverse = coeff[1]
if (inverse < 0) {
inverse = n + inverse
}
return (inverse)
}
gcdSteps = function(a, b) {
step = 0
while (b != 0) {
r = a %% b
a = b
b = r
step = step + 1
}
return (step)
}
highestPower = function(n, b) {
degree = 0
while (n >= (b ^ degree)) {
degree = degree + 1
}
return (degree-1)
}
# comupte the number of digits of an integer
# digitNum = function(b) {
#  return (floor(log10(b) + 1))
# }
digitNum = function(a) {
return (highestPower(a, 10) + 1)
}
highestPowerDivisible = function(n, b) {
degree = 0
while (n %% (b ^ degree) == 0) {
degree = degree + 1
}
return (degree-1)
}
limitOfStep = function(a, lob) {
limitList = NULL
for (i in 1:length(lob)) {
b = lob[i]
step = gcdSteps(a, b)
digits = digitNum(b)
limit = step / digits
limitList = c(limitList, limit)
}
return (limitList)
}
#blist = NULL
#for (i in 10:1000010) {
#  blist = c(blist, i)
#}
# blist = seq(from = 10, to = 10010, by = 1)
# ycoord = limitOfStep(53751, blist)
# plot(x = blist, y = ycoord, type = "p")
#plot(x = blist, y = limitOfStep(2437377, blist), type = "p")
#hist(x = limitOfStep(5437, blist))
inverse(7, 2620)
(18^7) %% 2621
# GCD
gcd = function(a, b){
while (b != 0) {
r = a %% b
a = b
b = r
}
return (a)
}
# Bezout's Coefficients
bezoutCoef = function(m, n){
g = gcd(m, n)
m = m / g
n = n / g
v1 = c(1, 0)
v2 = c(0, 1)
while (n > 1){
r = m %% n
q = m %/% n
v3 = v1 - q * v2
v1 = v2
v2 = v3
m = n
n = r
}
return (v2)
}
#bezoutCoef(173, 167)
#bezoutCoef(603, 626)
inverse = function(a, n) {
if (gcd(a, n) != 1) {
print("No inverse")
}
coeff = bezoutCoef(a, n)
inverse = coeff[1]
if (inverse < 0) {
inverse = n + inverse
}
return (inverse)
}
gcdSteps = function(a, b) {
step = 0
while (b != 0) {
r = a %% b
a = b
b = r
step = step + 1
}
return (step)
}
highestPower = function(n, b) {
degree = 0
while (n >= (b ^ degree)) {
degree = degree + 1
}
return (degree-1)
}
# comupte the number of digits of an integer
# digitNum = function(b) {
#  return (floor(log10(b) + 1))
# }
digitNum = function(a) {
return (highestPower(a, 10) + 1)
}
highestPowerDivisible = function(n, b) {
degree = 0
while (n %% (b ^ degree) == 0) {
degree = degree + 1
}
return (degree-1)
}
limitOfStep = function(a, lob) {
limitList = NULL
for (i in 1:length(lob)) {
b = lob[i]
step = gcdSteps(a, b)
digits = digitNum(b)
limit = step / digits
limitList = c(limitList, limit)
}
return (limitList)
}
#blist = NULL
#for (i in 10:1000010) {
#  blist = c(blist, i)
#}
# blist = seq(from = 10, to = 10010, by = 1)
# ycoord = limitOfStep(53751, blist)
# plot(x = blist, y = ycoord, type = "p")
#plot(x = blist, y = limitOfStep(2437377, blist), type = "p")
#hist(x = limitOfStep(5437, blist))
